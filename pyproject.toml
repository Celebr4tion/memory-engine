[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "memory-engine"
version = "0.4.0"
authors = [
    {name = "Janek Wenning", email = "noreply@github.com"},
]
description = "A comprehensive knowledge graph and memory management system with modular storage backends"
readme = "README.md"
license = {file = "LICENSE.md"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database :: Database Engines/Servers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["knowledge-graph", "memory-management", "ai", "llm", "embeddings", "vector-database", "graph-database"]
dependencies = [
    "google-genai>=0.1.0",
    "gremlinpython>=3.6.0",
    "pymilvus>=2.3.0",
    "pyyaml>=6.0",
    "sqlalchemy>=2.0.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "networkx>=2.8.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-env>=1.1.0",
    "pytest-mock>=3.14.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
mcp = [
    "mcp>=0.1.0",
]
sqlite = [
    "aiosqlite>=0.17.0",
]

[project.urls]
"Homepage" = "https://github.com/Celebr4tion/memory-engine"
"Bug Reports" = "https://github.com/Celebr4tion/memory-engine/issues"
"Source" = "https://github.com/Celebr4tion/memory-engine"

[project.scripts]
memory-engine = "memory_engine_cli:main"

[tool.setuptools.packages.find]
include = ["memory_core*"]

[tool.setuptools.package-data]
memory_core = ["config/*.yaml", "config/environments/*.yaml"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.genai.*",
    "pymilvus.*",
    "gremlin_python.*",
    "networkx.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["memory_core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]